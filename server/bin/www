#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

const socketio = require('socket.io');
const io = socketio(server);

io.on('connection', socket => {

  socket.on('conectado', () => {
    console.log("Usuario conectado");
  })

  socket.on('mensaje', (owner, message, roomId) => {
    console.log("entro en mensaje1")
    io.emit("mensajes", {owner, message, roomId});

  })

  socket.on('disconect', () => {
    io.emit("mensajes", {servidor: "Servidor", mensaje: "Ha abandonadop la sala"});
  })
})

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

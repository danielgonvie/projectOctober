#!/usr/bin/env node
const express = require("express");
const router = express.Router();
const Room = require("../models/Room");

const http = require('http');

let app = require('../app');

// catch 404
app.use((req, res, next) => {
  res.status(404);
  res.json({
    message: 'not-found'
  });
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.json({
      message: err.message,
      error: err
    });
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

const socketio = require('socket.io');
const io = socketio(server);

io.on('connection', socket => {
  let channel;
  let actualUsers;
  let userId;

  socket.on('conectado', () => {
    console.log("Usuario conectado");
    io.emit('getTime')
  })

  socket.on('sendTime', (time) => {
    io.emit('setTime', time)
  })

  socket.on('mensaje', (owner, message, roomId) => {
    io.emit("mensajes", {owner, message, roomId});

  })

  socket.on('joinedRoom', (roomId, currentUsers, userIdentifier) => {
    userId = userIdentifier;
    channel = roomId;
    actualUsers = currentUsers;
    Room.findOneAndUpdate({_id: channel}, { currentUsers: currentUsers}, {new: true})
    .then(room => {
      io.emit("updateUsers", roomId, room.currentUsers);
    })
    .catch(error => console.log("Ha sucedido algo malo" + error));
  })

  socket.on('leaveRoom', (roomId, currentUsers, userId) => {
    let leaveArr = currentUsers;
    let index = leaveArr.indexOf(userId)
    if(index > -1){
      leaveArr.splice(index, 1)
    }
    Room.findOneAndUpdate({_id: roomId}, { currentUsers: leaveArr}, {new: true})
    .then(room => {
      io.emit("updateUsers", roomId, leaveArr);
    })
    .catch(error => console.log("Ha sucedido algo malo" + error));
  })

  socket.on('disconnect', () => {
    if(actualUsers){
    Room.findById(channel).then(room => {
      actualUsers = room.currentUsers;
        let index = actualUsers.indexOf(userId)
        if(index > -1){
          actualUsers.splice(index, 1)
        }
        Room.findOneAndUpdate({_id: channel}, { currentUsers: actualUsers}, {new: true})
        .then(room => {
          io.emit("updateUsers", channel, actualUsers);
        })
        .catch(error => console.log("Ha sucedido algo malo" + error));
    }
    )
  }
  })

  socket.on('newSong', (song) => {
    console.log("Nueva canción añadida");
    io.emit("addSong", {song});
  })
})



server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
